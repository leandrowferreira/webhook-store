name: 🔄 Branch Protection

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  branch-protection:
    runs-on: ubuntu-latest
    name: 🛡️ Branch Protection Checks
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "🔍 Checking branch: $BRANCH_NAME"
        
        # Check if branch follows semantic naming (feature/, bugfix/, hotfix/, release/)
        if [[ $BRANCH_NAME =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
          echo "✅ Branch name follows semantic convention: $BRANCH_NAME"
        else
          echo "❌ Branch name should follow pattern: feature/*, bugfix/*, hotfix/*, or release/*"
          echo "   Current branch: $BRANCH_NAME"
          exit 1
        fi

    - name: 🔍 Check for merge conflicts
      run: |
        git fetch origin main
        if git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q "<<<<<<< "; then
          echo "❌ Merge conflicts detected. Please resolve conflicts before merging."
          exit 1
        else
          echo "✅ No merge conflicts detected"
        fi

    - name: 📊 Check commit message format
      run: |
        echo "🔍 Checking recent commit messages..."
        git log --oneline -n 5 --format="%s" > commit_messages.txt
        
        # Check if commits follow conventional commits
        while IFS= read -r message; do
          if [[ $message =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
            echo "✅ Good commit: $message"
          else
            echo "⚠️  Consider using conventional commits: $message"
          fi
        done < commit_messages.txt

  size-check:
    runs-on: ubuntu-latest
    name: 📏 Pull Request Size Check
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📊 Check PR size
      run: |
        FILES_CHANGED=$(git diff --name-only origin/main...HEAD | wc -l)
        LINES_CHANGED=$(git diff --stat origin/main...HEAD | tail -n1 | grep -o '[0-9]* insertions\|[0-9]* deletions' | grep -o '[0-9]*' | paste -sd+ | bc)
        
        echo "📊 PR Statistics:"
        echo "  Files changed: $FILES_CHANGED"
        echo "  Lines changed: $LINES_CHANGED"
        
        if [ "$FILES_CHANGED" -gt 50 ]; then
          echo "⚠️  Large PR: $FILES_CHANGED files changed (consider splitting)"
        elif [ "$FILES_CHANGED" -gt 20 ]; then
          echo "🟡 Medium PR: $FILES_CHANGED files changed"
        else
          echo "✅ Small PR: $FILES_CHANGED files changed"
        fi
        
        if [ "$LINES_CHANGED" -gt 1000 ]; then
          echo "⚠️  Large changes: $LINES_CHANGED lines changed (consider splitting)"
        elif [ "$LINES_CHANGED" -gt 500 ]; then
          echo "🟡 Medium changes: $LINES_CHANGED lines changed"
        else
          echo "✅ Small changes: $LINES_CHANGED lines changed"
        fi

  pr-labeler:
    runs-on: ubuntu-latest
    name: 🏷️ Auto Label PR
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Label based on changes
      uses: actions/github-script@v6
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const labels = [];
          
          // Check for test files
          if (files.some(f => f.filename.includes('test') || f.filename.includes('Test'))) {
            labels.push('tests');
          }
          
          // Check for database changes
          if (files.some(f => f.filename.includes('migration') || f.filename.includes('seeder'))) {
            labels.push('database');
          }
          
          // Check for frontend changes
          if (files.some(f => f.filename.includes('.js') || f.filename.includes('.css') || f.filename.includes('.vue'))) {
            labels.push('frontend');
          }
          
          // Check for backend changes
          if (files.some(f => f.filename.includes('Controller') || f.filename.includes('Model'))) {
            labels.push('backend');
          }
          
          // Check for documentation
          if (files.some(f => f.filename.includes('README') || f.filename.includes('.md'))) {
            labels.push('documentation');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels,
            });
          }
